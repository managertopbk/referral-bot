import asyncio
import logging
import os

import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.utils.deep_linking import create_start_link

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_TOKEN = os.getenv('API_TOKEN')
if not API_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω API_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

DB_FILE = "referrals.db"
REFERRAL_GOAL = 10

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
dp = Dispatcher()


# --- –õ–æ–≥–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å–∫–∞–ª–∏ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é, —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª referrals.db –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                invited_by INTEGER,
                referrals INTEGER DEFAULT 0,
                goal_achieved_notified INTEGER DEFAULT 0
            )
        """)
        await db.commit()
    log.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def add_user(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç."""
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        await db.commit()

async def process_referral(user_id: int, inviter_id: int) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —Å–≤—è–∑—ã–≤–∞—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Å—á–∏—Ç–∞–Ω.
    """
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute("SELECT invited_by FROM users WHERE user_id = ?", (user_id,))
        result = await cursor.fetchone()

        if result and result[0] is None and user_id != inviter_id:
            await db.execute("UPDATE users SET invited_by = ? WHERE user_id = ?", (inviter_id, user_id))
            await db.execute("UPDATE users SET referrals = referrals + 1 WHERE user_id = ?", (inviter_id,))
            await db.commit()
            log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω {inviter_id}")
            return True
    return False

async def check_and_notify_on_goal(bot: Bot, inviter_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —Ü–µ–ª–∏, –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤–ø–µ—Ä–≤—ã–µ."""
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute("SELECT referrals, goal_achieved_notified FROM users WHERE user_id = ?", (inviter_id,))
        result = await cursor.fetchone()
        if not result:
            return

        referrals, notified = result
        if referrals >= REFERRAL_GOAL and not notified:
            try:
                await bot.send_message(
                    inviter_id,
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –≤ {REFERRAL_GOAL} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n"
                    f"–í–æ—Ç –≤–∞—à –∏–Ω—Å–∞–π–¥: [–¢–£–¢ –ë–£–î–ï–¢ –°–¢–ê–í–ö–ê]"
                )
                await db.execute("UPDATE users SET goal_achieved_notified = 1 WHERE user_id = ?", (inviter_id,))
                await db.commit()
                log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inviter_id} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ –∏ –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω.")
            except Exception as e:
                log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {inviter_id}: {e}")

async def get_user_referrals(user_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute("SELECT referrals FROM users WHERE user_id = ?", (user_id,))
        result = await cursor.fetchone()
        return result[0] if result else 0


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ ---
@dp.message(CommandStart())
async def handle_start(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –≤–∫–ª—é—á–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É."""
    user_id = message.from_user.id
    await add_user(user_id)

    args = message.get_args()
    if args and args.isdigit():
        inviter_id = int(args)
        if inviter_id != user_id:
            await add_user(inviter_id)
            if await process_referral(user_id=user_id, inviter_id=inviter_id):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —Ü–µ–ª–∏
                await check_and_notify_on_goal(bot, inviter_id)

    referral_link = await create_start_link(bot, str(user_id), encode=True)

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ñ–ë –°–¢–ê–í–ö–£ —Å –∫—ç—Ñ–æ–º –≤—ã—à–µ 15?\n\n"
        f"‚ùóÔ∏è–ù—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å {REFERRAL_GOAL} —á–µ–ª–æ–≤–µ–∫ –≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞!\n\n"
        f"üîó –í–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
        f"üìä –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª, –≤–≤–µ–¥–∏ /progress"
    )

@dp.message(Command("progress"))
async def handle_progress(message: types.Message):
    user_id = message.from_user.id
    referrals = await get_user_referrals(user_id)

    if referrals >= REFERRAL_GOAL:
        await message.answer(
            f"üéâ –ö—Ä–∞—Å–∞–≤–µ—Ü! –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {referrals} —á–µ–ª–æ–≤–µ–∫(–∞)!\n"
            f"–¢—ã —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑. –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!"
        )
    else:
        remaining = REFERRAL_GOAL - referrals
        await message.answer(
            f"üë• –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {referrals} —á–µ–ª–æ–≤–µ–∫(–∞). "
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ {remaining} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏."
        )

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    bot = Bot(token=API_TOKEN)
    await init_db()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
